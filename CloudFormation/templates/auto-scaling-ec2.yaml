AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Auto scaling ec2.
Parameters:
  ProjectName:
    Type: String
    Default: "aws-cloud-tech"
  VpcCIDR:
    Type: String
    Default: "192.168.0.0/16"
  aSubnetCIDR:
    Type: String
    Default: "192.168.1.0/24"
  bSubnetCIDR:
    Type: String
    Default: "192.168.2.0/24"
  aPrivateSubnetCIDR:
    Type: String
    Default: "192.168.3.0/24"
  bPrivateSubnetCIDR:
    Type: String
    Default: "192.168.4.0/24"
  NATGatewayCreate:
    Default: true
    Type: String
    AllowedValues:
      - true
      - false
  StepInstanceCreate:
    Default: true
    Type: String
    AllowedValues:
      - true
      - false
  WebAllowLocation:
    Description: 'MyIP'
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/32
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
  StepAllowLocation:
    Description: 'MyIP'
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/32
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
  MyAMI:
    Type: String
    Description: your ami id
    Default: 'ami-0000000000000000'
  DefaultAMI:
    Type: AWS::SSM::Parameter::Value<String>
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
  WebKeyPair:
    Description: web server keypair
    Type: 'AWS::EC2::KeyPair::KeyName'
  StepKeyPair:
    Description: step server keypair
    Type: 'AWS::EC2::KeyPair::KeyName'
  AutoScalingDesiredCapacity:
    Default: '2'
    Description: The initial number of WebServer instances
    Type: Number
    MinValue: '0'
    MaxValue: '5'
    ConstraintDescription: must be between 0 and 5 EC2 instances.

Conditions:
  isCreateNatGateway: !Equals [ !Ref NATGatewayCreate, true ]
  isCreateStepInstance: !Equals [ !Ref StepInstanceCreate, true ]
  useMyAMI: !Not [ !Equals [ !Ref MyAMI, "" ] ]

Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-vpc"

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-igw"

  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  aSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: "ap-northeast-1a"
      CidrBlock: !Ref aSubnetCIDR
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-subnet-a"

  bSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: "ap-northeast-1c"
      CidrBlock: !Ref bSubnetCIDR
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-subnet-b"

  aPrivateSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: "ap-northeast-1a"
      CidrBlock: !Ref aPrivateSubnetCIDR
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-private-subnet-a"

  bPrivateSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: "ap-northeast-1c"
      CidrBlock: !Ref bPrivateSubnetCIDR
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-private-subnet-b"

  aRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-public-route-a"

  bRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-public-route-b"

  aPrivateRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-private-route-a"

  bPrivateRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-private-route-b"

  aSubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref aSubnet
      RouteTableId: !Ref aRouteTable

  bSubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref bSubnet
      RouteTableId: !Ref bRouteTable

  aPrivateSubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref aPrivateSubnet
      RouteTableId: !Ref aPrivateRouteTable

  bPrivateSubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref bPrivateSubnet
      RouteTableId: !Ref bPrivateRouteTable

  aRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref aRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  bRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref bRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  aPrivateRoute:
    Type: "AWS::EC2::Route"
    Condition: isCreateNatGateway
    Properties:
      RouteTableId: !Ref aPrivateRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref aNatGateway

  bPrivateRoute:
    Type: "AWS::EC2::Route"
    Condition: isCreateNatGateway
    Properties:
      RouteTableId: !Ref bPrivateRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref bNatGateway

  aEIP:
    Type: AWS::EC2::EIP
    Condition: isCreateNatGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-a-ngw-eip"

  bEIP:
    Type: AWS::EC2::EIP
    Condition: isCreateNatGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-b-ngw-eip"

  aNatGateway:
    Type: AWS::EC2::NatGateway
    Condition: isCreateNatGateway
    Properties:
      AllocationId: !GetAtt aEIP.AllocationId
      SubnetId: !Ref aSubnet
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-a-ngw"

  bNatGateway:
    Type: AWS::EC2::NatGateway
    Condition: isCreateNatGateway
    Properties:
      AllocationId: !GetAtt bEIP.AllocationId
      SubnetId: !Ref bSubnet
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-b-ngw"

  AutoScalingEC2Role:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: !Sub "${ProjectName}-logs"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ssm:GetParameter
                Resource: '*'
  AutoScalingEC2Profile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref AutoScalingEC2Role

  LoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-elb-sg"
      GroupDescription: Internet to ELB. Enable HTTP access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: !Ref WebAllowLocation
      VpcId: !Ref VPC

  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-elb"
      Name: !Sub "${ProjectName}-elb"
      Subnets:
        - !Ref aSubnet
        - !Ref bSubnet
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup

  TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-target-group"
      Name: !Sub "${ProjectName}"
      Port: 80
      Protocol: HTTP
      HealthCheckPath: /healthcheck.html
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      VpcId: !Ref VPC

  Listener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Port: '80'
      Protocol: HTTP
      LoadBalancerArn: !Ref LoadBalancer

  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-web-sg"
      GroupDescription: ELB to EC2. Enable HTTP access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          SourceSecurityGroupId: !Ref StepSecurityGroup
      VpcId: !Ref VPC

  AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: !Sub "${ProjectName}-web-auto-scaling-group"
      AutoScalingGroupName: !Sub "${ProjectName}-web-auto-scaling-group"
      VPCZoneIdentifier:
        - !Ref aPrivateSubnet
        - !Ref bPrivateSubnet
      LaunchConfigurationName: !Ref Ec2LaunchConfiguration
      MinSize: '0'
      MaxSize: '3'
      DesiredCapacity: !Ref AutoScalingDesiredCapacity
      TargetGroupARNs: [!Ref TargetGroup]
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '1'
        PauseTime: PT10M
        WaitOnResourceSignals: 'true'

  Ec2LaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId:
        Fn::Sub:
          - ${ami}
          - {ami: !If [useMyAMI, !Ref MyAMI, !Ref DefaultAMI]}
      InstanceType: 't2.micro'
      IamInstanceProfile: !Ref AutoScalingEC2Profile
      SecurityGroups:
        - !Ref WebServerSecurityGroup
      KeyName: !Ref WebKeyPair
      UserData:
        Fn::Base64:
          Fn::Sub:
            - |
              #!/bin/bash -xe
              # [cloudwatch]
              rpm -Uvh https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
              #
              # [aws-cli]
              yum update -y
              yum install -y ruby
              yum install -y aws-cli
              yum update -y aws-cfn-bootstrap
              #
              # [install]
              /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --region ${AWS::Region} --resource Ec2LaunchConfiguration --configsets install
              #
              # finish!
              /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource AutoScalingGroup --region ${AWS::Region}
            - {}
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          install:
            - cloudwatch_restart
            - cfn
            - install_packages
            - apach
        cloudwatch_restart:
          commands:
            1_stop_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop
            2_start_service:
              command:
                Fn::Sub:
                  - |
                    /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c ssm:${ssmkey} -s
                  - { ssmkey: !Ref CloudWatchParameter }
        cfn:
          files:
            '/etc/cfn/cfn-hup.conf':
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: '000400'
              owner: root
              group: root
            '/etc/cfn/hooks.d/launch-config-auto-reloader.conf':
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.Ec2LaunchConfiguration.Metadata.AWS::CloudFormation::Init.cloudwatch
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --region ${AWS::Region} --resource Ec2LaunchConfiguration --configsets reloader
                runas=root
              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        install_packages:
          packages:
            yum:
              httpd: []
              php: []
        apach:
          commands:
            1_test_page:
              command: touch /var/www/html/healthcheck.html
            2_start_service:
              command: service httpd start

  StepSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-step-sg"
      GroupDescription: Enable SSH access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref StepAllowLocation
      VpcId: !Ref VPC

  StepEC2:
    Type: "AWS::EC2::Instance"
    Condition: isCreateStepInstance
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-step-ec2"
      ImageId: !Ref DefaultAMI
      InstanceType: 't2.micro'
      KeyName: !Ref StepKeyPair
      EbsOptimized: false
      SecurityGroupIds:
        - !Ref StepSecurityGroup
      SubnetId: !Ref aSubnet

  StepEIP:
    Type: AWS::EC2::EIP
    Condition: isCreateStepInstance
    Properties:
      InstanceId: !Ref StepEC2
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-step-eip"

  CloudWatchParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "_${ProjectName}-cloud-watch"
      Type: String
      Value:
        !Sub
          - |
            {
              "logs": {
                "logs_collected": {
                  "files": {
                    "collect_list": [
                      {
                        "file_path": "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log",
                        "log_group_name": "/${ProjectName}/cfn",
                        "log_stream_name": "{instance_id}_amazon-cloudwatch-agent.log",
                        "timezone": "UTC"
                      },
                      {
                        "file_path": "/var/log/cfn-init.log",
                        "log_group_name": "/${ProjectName}/cfn",
                        "log_stream_name": "{instance_id}_cfn-init.log",
                        "timezone": "Local"
                      },
                      {
                        "file_path": "/var/log/cfn-init-cmd.log",
                        "log_group_name": "/${ProjectName}/cfn",
                        "log_stream_name": "{instance_id}_cfn-init-cmd.log",
                        "timezone": "Local"
                      },
                      {
                        "file_path": "/var/log/cloud-init.log",
                        "log_group_name": "/${ProjectName}/cfn",
                        "log_stream_name": "{instance_id}_cloud-init.log",
                        "timezone": "Local"
                      },
                      {
                        "file_path": "/var/log/cloud-init-output.log",
                        "log_group_name": "/${ProjectName}/cfn",
                        "log_stream_name": "{instance_id}_cloud-init-output.log",
                        "timezone": "Local"
                      }
                    ]
                  }
                },
                "log_stream_name": "default",
                "force_flush_interval" : 15
              }
            }
          - {}
      Tier: Standard
      Description: SSM Parameter for running date command.
      Tags:
        Name: !Sub "${ProjectName}-cloud-watch-param"

Outputs:
  URL:
    Value: !Join
      - ''
      - - 'http://'
        - !GetAtt LoadBalancer.DNSName
        - /
  UseAMI:
    Value:
      Fn::Sub:
        - ${ami}
        - {ami: !If [useMyAMI, !Ref MyAMI, !Ref DefaultAMI]}
